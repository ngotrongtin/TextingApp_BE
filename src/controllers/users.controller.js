import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import User from "../models/users.model.js"; // ƒê∆∞·ªùng d·∫´n ƒë·∫øn model User


// ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi
const registerUser = async (req, res) => {
  try {
    const { username, email, password } = req.body;

    const existingUser = await User.findOne({ $or: [{ username }, { email }] });
    if (existingUser)
      return res
        .status(400)
        .json({ message: "Username ho·∫∑c email ƒë√£ t·ªìn t·∫°i." });

    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({ username, email, password: hashedPassword });
    await user.save();

    res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};


// ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
const loginUser = async (req, res) => {
  try {
    const { email, password } = req.body;

    const user = await User.findOne({ email });
    if (!user)
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(401).json({ message: "Sai m·∫≠t kh·∫©u" });

    const token = jwt.sign({ _id: user._id }, process.env.JWT_SECRET, {
      expiresIn: "1d",
    });
    res.cookie("token", token, {
        httpOnly: false,         // üëà kh√¥ng cho JS truy c·∫≠p, gi√∫p ch·ªëng XSS
        secure: false,          // true n·∫øu d√πng HTTPS
        maxAge: 24 * 60 * 60 * 1000 // 1 ng√†y
    });
    res.json({
      token,
      user: {
        username: user.username,
        email: user.email,
        avatar: user.avatar,
      },
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};


// ƒêƒÉng xu·∫•t ng∆∞·ªùi d√πng
const logoutUser = (req, res) => {
  res.clearCookie("token");
  res.json({ message: "ƒê√£ ƒëƒÉng xu·∫•t" });
};

// Reset m·∫≠t kh·∫©u
const resetPassword = async (req, res) => {
  const { email, oldPassword, newPassword } = req.body;
  user = await User.findOne({ email });
  if (!user) return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
  const isMatch = await bcrypt.compare(oldPassword, user.password);
  if (!isMatch) return res.status(401).json({ message: "Sai m·∫≠t kh·∫©u" });
  const hashedPassword = await bcrypt.hash(newPassword, 10);
  user.password = hashedPassword;
  user.save();
  res.json({ message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng" });
}

// C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
const updateUser = async (req, res) => {
  const { userName, userBio } = req.body;
  const avatarUrl = req.file.path; // ƒê∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh ƒë√£ t·∫£i l√™n
  const decoded = jwt.verify(req.cookies.token, process.env.JWT_SECRET);
  const userId = decoded.userId; // L·∫•y userId t·ª´ token ƒë√£ gi·∫£i m√£
  const user = await User.findById(userId);
  if (!user) return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
  user.username = userName;
  user.bio = userBio;
  user.avatar = avatarUrl; // C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n ·∫£nh ƒë·∫°i di·ªán
  await user.save();
  res.json({ message: "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng", user });
}

// T√¨m ki·∫øm ng∆∞·ªùi d√πng
const searchUsers = async (req, res) => {
  try {
    const { userName, email } = req.query; // L·∫•y th√¥ng tin t√¨m ki·∫øm t·ª´ query string

    // T·∫°o ƒëi·ªÅu ki·ªán t√¨m ki·∫øm ƒë·ªông
    const searchCriteria = {};
    if (userName) searchCriteria.username = { $regex: userName, $options: "i" }; // T√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
    if (email) searchCriteria.email = { $regex: email, $options: "i" };

    // T√¨m ki·∫øm ng∆∞·ªùi d√πng trong c∆° s·ªü d·ªØ li·ªáu
    const users = await User.find(searchCriteria);

    // Tr·∫£ v·ªÅ danh s√°ch ng∆∞·ªùi d√πng t√¨m ƒë∆∞·ª£c
    res.status(200).json({ message: "T√¨m ki·∫øm th√†nh c√¥ng", users });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

export { loginUser, registerUser, logoutUser, resetPassword, updateUser, searchUsers };
